import soot.jimple.IntConstant;
import soot.jimple.LongConstant;


aspect Expressions {


	public static int Expr.temp = 0;
	
	public static void Expr.setTempIdx(int i) {
		Expr.temp = i;
	}
		
	public static int Expr.getTempIdx() {
		return Expr.temp++;
	}
	
	public static Local Expr.getTempLocal(Body b, Expr e) {
		Local local = Jimple.v().newLocal("temp$" + Expr.getTempIdx(), e.type().sootType()); 
		b.getLocals().add(local);
		return local;
	}
	
	public Local Expr.getTempLocal(Body b) {
		Local local = Jimple.v().newLocal("temp$" + Expr.getTempIdx(), this.type().sootType());
		System.out.println("temp$ has type " + this.type().sootType());
		b.getLocals().add(local);
		return local;
	}
		
	public void Expr.saveLocalValue(Body b, Local l, soot.Value val) {
		Chain units = b.getUnits();
		units.add(Jimple.v().newAssignStmt(l, val));
	}
	
	public Local Expr.saveInTempLocal(Body b, soot.Value val) {
		Local newLocal = this.getTempLocal(b);
		this.saveLocalValue(b, newLocal, val);
		return newLocal;
	}
	
	public Local Expr.saveInTempLocal(Body b) {
		Local newLocal = this.getTempLocal(b);
		this.saveLocalValue(b, newLocal, this.emit(b));
		return newLocal;
	}
	
	// abstract general case
	public soot.Value Expr.emit(Body b) { 
		throw new Error("Operation emit not supported for " + getClass().getName());
	}
	
	public soot.Value IntegerLiteral.emit(Body b) {
		return soot.jimple.IntConstant.v(constant().intValue());
	}
	
	//TODO: Soot doesn't have a CharConstant... maybe add one?
	public soot.Value CharacterLiteral.emit(Body b) {
		return soot.jimple.IntConstant.v(constant().intValue());
	}
	
	public soot.Value LongLiteral.emit(Body b) {
		return soot.jimple.LongConstant.v(constant().longValue());
	}
	
	public soot.Value FloatingPointLiteral.emit(Body b) {
		return soot.jimple.FloatConstant.v(constant().floatValue());
	}
	
	public soot.Value DoubleLiteral.emit(Body b) {
		return soot.jimple.DoubleConstant.v(constant().doubleValue());
	}
	
	public soot.Value StringLiteral.emit(Body b) {
		return soot.jimple.StringConstant.v(getLITERAL());
	}
	
	public soot.Value NullLiteral.emit(Body b) {
		return soot.jimple.NullConstant.v();
	}
	
	//TODO: Soot doesn't have a BooleanConstant... maybe add one?
	public soot.Value BooleanLiteral.emit(Body b) {
		return soot.jimple.IntConstant.v(constant().booleanValue() ? 1 : 0);
	}
	
	public soot.Value ParExpr.emit(Body b) {
		return getExpr().emit(b);
	}
	
	public soot.Value ArrayInit.emit(Body b) {
		soot.Value size = this.emitConstant(new Constant.ConstantInt(getNumInit()));
		NewArrayExpr array = Jimple.v().newNewArrayExpr(this.type().componentType().sootType(), size);
		Local newLocal = this.saveInTempLocal(b, array);
		Chain units = b.getUnits();
		for(int i = 0; i < getNumInit(); i++) {
			soot.Value rVal = this.type().emitCastTo(this.getInit(i).emit(b), this.type().componentType());
			//soot.Value rVal = this.getInit(i).emit(b);
			soot.Value index = this.emitConstant(new Constant.ConstantInt(i));
			soot.Value lVal = ArrayDecl.newArrayRef(newLocal, index);
			Local tempLocal = this.getInit(i).saveInTempLocal(b, rVal);
			units.add(Jimple.v().newAssignStmt(lVal, tempLocal));
		}
		return newLocal;
	}
	
	//general case...
	public soot.Value Unary.emit(Body b) {
		return super.emit(b);
	}
	
	public Local Unary.getOperandLocal(Body b) {
		soot.Value operand = this.getOperand().emit(b);
		if (operand instanceof Local) return (Local) operand;
		Local newLocal = this.getTempLocal(b);
		Chain units = b.getUnits();
		units.add(Jimple.v().newAssignStmt(newLocal, operand));
		return newLocal;
	}
	
	// x = -y;
	public soot.Value MinusExpr.emit(Body b) {
		Local operand = this.getOperandLocal(b);
		soot.jimple.NegExpr retval = Jimple.v().newNegExpr(operand);
		return retval;
	}
	
	// x = +y
	public soot.Value PlusExpr.emit(Body b) {
		return this.getOperand().emit(b);
	}
	
	//x = ~y
	public soot.Value BitNotExpr.emit(Body b) {
		soot.Value v = this.emitConstant(new Constant.ConstantInt(-1));
		Local operand = this.getOperandLocal(b);
		soot.jimple.XorExpr retval = Jimple.v().newXorExpr(operand, v);
		return retval;
	}
	
	// for logic negation see BooleanExpressions.jrag
	
	public soot.Value CastExpr.emit(Body b) {
		//TODO: previous code had a lot of stuff in it... Was it just for eval to work?
		if (this.isConstant()) return this.emitConstant(this.constant());
		
		System.out.println(this.getExpr().prettyPrint());
		soot.Value casted = Expr.newCastExpr(this.getExpr().emit(b), this.type());
		Local local = this.getTempLocal(b);
		b.getUnits().add(Jimple.v().newAssignStmt(local, casted));
		return local;
	}
	
	public soot.Value ASTNode.emitConstant(Constant constant) {
		if (constant instanceof Constant.ConstantInt) {
			return soot.jimple.IntConstant.v(constant.intValue());
		} else if (constant instanceof Constant.ConstantLong) {
			return soot.jimple.LongConstant.v(constant.longValue());
		} else if (constant instanceof Constant.ConstantFloat) {
			return soot.jimple.FloatConstant.v(constant.floatValue());
		} else if (constant instanceof Constant.ConstantDouble) {
			return soot.jimple.DoubleConstant.v(constant.doubleValue());
		} else if (constant instanceof Constant.ConstantChar) {
			return soot.jimple.IntConstant.v(constant.intValue());
		} else if (constant instanceof Constant.ConstantBoolean) {
			return soot.jimple.IntConstant.v(constant.booleanValue() ? 1 : 0);
		} else if (constant instanceof Constant.ConstantString) {
			return soot.jimple.StringConstant.v(constant.stringValue());
		} else {
			throw new Error("Unexpected constant");
		}
	}
	
	//General case... for postfixes
	public soot.Value Unary.emitPostfix(Body b, int constant) {
		Local operand = this.getOperandLocal(b);
		Local copy = this.saveInTempLocal(b, operand);
		soot.Value postfix = this.emitConstant(new Constant.ConstantInt(constant));
		soot.jimple.AddExpr retval = Jimple.v().newAddExpr(operand, postfix);
		Chain units = b.getUnits();
		units.add(Jimple.v().newAssignStmt(operand, retval));
		return copy;
	}
	
	public soot.Value PostIncExpr.emit(Body b) {
		return this.emitPostfix(b, 1);
	}
	
	public soot.Value PostDecExpr.emit(Body b) {
		return this.emitPostfix(b, -1);
	}
	
	//General case for prefixes
	public soot.Value Unary.emitPrefix(Body b, int constant) {
		Local operand = this.getOperandLocal(b);
		soot.Value prefix = this.emitConstant(new Constant.ConstantInt(constant));
		soot.jimple.AddExpr temp = Jimple.v().newAddExpr(operand, prefix);
		Chain units = b.getUnits();
		units.add(Jimple.v().newAssignStmt(operand, temp));
		return operand;
	}
	
	public soot.Value PreIncExpr.emit(Body b) {
		return this.emitPrefix(b, 1);
	}
	
	public soot.Value PreDecExpr.emit(Body b) {
		return this.emitPrefix(b, -1);
	}
	
	//General case... for binary operations
	public soot.Value Binary.emit(Body b) {
		throw new Error("emitOperation not implemented in " + getClass().getName());
	}
	
	public Local Binary.getLeftOperandLocal(Body b) {
		soot.Value lhs = this.getLeftOperand().emit(b);
		if (lhs instanceof Local) return (Local) lhs;
		Local lhsLocal = this.getTempLocal(b);
		Chain units = b.getUnits();
		units.add(Jimple.v().newAssignStmt(lhsLocal, lhs));
		return lhsLocal;
	}
	
	public Local Binary.getRightOperandLocal(Body b) {
		soot.Value rhs = this.getRightOperand().emit(b);
		if (rhs instanceof Local) return (Local) rhs;
		Local rhsLocal = this.getTempLocal(b);
		Chain units = b.getUnits();
		units.add(Jimple.v().newAssignStmt(rhsLocal, rhs));
		return rhsLocal;
	}
	
	//TODO:
	public soot.Value AssignSimpleExpr.emit(Body b) {
		//System.out.println("ASSIGN SIMPLE EXPR" + this.getSource().prettyPrint());
		soot.Value rhs = this.getSource().emit(b);
		//System.out.println("ASSIGN SIMPLE EXPR" + this.getDest().prettyPrint());
		soot.Value lhs = this.getDest().emit(b);
		Chain units = b.getUnits();
		units.add(Jimple.v().newAssignStmt(lhs, rhs));
		return lhs;
	}
	
	public soot.Value AssignPlusExpr.emit(Body b) {
		soot.Value rhs = this.getSource().emit(b);
		soot.Value lhs = this.getDest().emit(b);
		Chain units = b.getUnits();
		soot.jimple.AddExpr addExpr = Jimple.v().newAddExpr(lhs, rhs);
		Local newLocal = this.saveInTempLocal(b, addExpr);
		units.add(Jimple.v().newAssignStmt(lhs, newLocal));
		return lhs;
	}
	
	public soot.Value AssignMulExpr.emit(Body b) {
		soot.Value rhs = this.getSource().emit(b);
		soot.Value lhs = this.getDest().emit(b);
		Chain units = b.getUnits();
		soot.jimple.MulExpr mulExpr = Jimple.v().newMulExpr(lhs, rhs);
		Local newLocal = this.saveInTempLocal(b, mulExpr);
		units.add(Jimple.v().newAssignStmt(lhs, newLocal));
		return lhs;
	}
	
	public soot.Value AssignDivExpr.emit(Body b) {
		soot.Value rhs = this.getSource().emit(b);
		soot.Value lhs = this.getDest().emit(b);
		Chain units = b.getUnits();
		soot.jimple.DivExpr divExpr = Jimple.v().newDivExpr(lhs, rhs);
		Local newLocal = this.saveInTempLocal(b, divExpr);
		units.add(Jimple.v().newAssignStmt(lhs, newLocal));
		return lhs;
	}
	
	public soot.Value AssignModExpr.emit(Body b) {
		soot.Value rhs = this.getSource().emit(b);
		soot.Value lhs = this.getDest().emit(b);
		Chain units = b.getUnits();
		soot.jimple.RemExpr remExpr = Jimple.v().newRemExpr(lhs, rhs);
		Local newLocal = this.saveInTempLocal(b, remExpr);
		units.add(Jimple.v().newAssignStmt(lhs, newLocal));
		return lhs;
	}
	
	public soot.Value AssignMinusExpr.emit(Body b) {
		soot.Value rhs = this.getSource().emit(b);
		soot.Value lhs = this.getDest().emit(b);
		Chain units = b.getUnits();
		soot.jimple.SubExpr e = Jimple.v().newSubExpr(lhs, rhs);
		Local newLocal = this.saveInTempLocal(b, e);
		units.add(Jimple.v().newAssignStmt(lhs, newLocal));
		return lhs;
	}
	
	public soot.Value AssignLShiftExpr.emit(Body b) {
		soot.Value rhs = this.getSource().emit(b);
		soot.Value lhs = this.getDest().emit(b);
		Chain units = b.getUnits();
		soot.jimple.ShlExpr e = Jimple.v().newShlExpr(lhs, rhs);
		Local newLocal = this.saveInTempLocal(b, e);
		units.add(Jimple.v().newAssignStmt(lhs, newLocal));
		return lhs;
	}
	
	public soot.Value AssignRShiftExpr.emit(Body b) {
		soot.Value rhs = this.getSource().emit(b);
		soot.Value lhs = this.getDest().emit(b);
		Chain units = b.getUnits();
		soot.jimple.ShrExpr e = Jimple.v().newShrExpr(lhs, rhs);
		Local newLocal = this.saveInTempLocal(b, e);
		units.add(Jimple.v().newAssignStmt(lhs, newLocal));
		return lhs;
	}
	
	public soot.Value AssignURShiftExpr.emit(Body b) {
		soot.Value rhs = this.getSource().emit(b);
		soot.Value lhs = this.getDest().emit(b);
		Chain units = b.getUnits();
		soot.jimple.UshrExpr e = Jimple.v().newUshrExpr(lhs, rhs);
		Local newLocal = this.saveInTempLocal(b, e);
		units.add(Jimple.v().newAssignStmt(lhs, newLocal));
		return lhs;
	}
	
	public soot.Value AssignAndExpr.emit(Body b) {
		soot.Value rhs = this.getSource().emit(b);
		soot.Value lhs = this.getDest().emit(b);
		Chain units = b.getUnits();
		soot.jimple.AndExpr e = Jimple.v().newAndExpr(lhs, rhs);
		Local newLocal = this.saveInTempLocal(b, e);
		units.add(Jimple.v().newAssignStmt(lhs, newLocal));
		return lhs;
	}
	
	public soot.Value AssignXorExpr.emit(Body b) {
		soot.Value rhs = this.getSource().emit(b);
		soot.Value lhs = this.getDest().emit(b);
		Chain units = b.getUnits();
		soot.jimple.XorExpr e = Jimple.v().newXorExpr(lhs, rhs);
		Local newLocal = this.saveInTempLocal(b, e);
		units.add(Jimple.v().newAssignStmt(lhs, newLocal));
		return lhs;
	}
	
	public soot.Value AssignOrExpr.emit(Body b) {
		soot.Value rhs = this.getSource().emit(b);
		soot.Value lhs = this.getDest().emit(b);
		Chain units = b.getUnits();
		soot.jimple.OrExpr e = Jimple.v().newOrExpr(lhs, rhs);
		Local newLocal = this.saveInTempLocal(b, e);
		units.add(Jimple.v().newAssignStmt(lhs, newLocal));
		return lhs;
	}
	
	
	public soot.Value AddExpr.emit(Body b) {
		Local lhs = this.getLeftOperandLocal(b);
		Local rhs = this.getRightOperandLocal(b);
		soot.jimple.AddExpr retval = Jimple.v().newAddExpr(lhs, rhs);
		return retval;
	}
	
	public soot.Value SubExpr.emit(Body b) {
		Local lhs = this.getLeftOperandLocal(b);
		Local rhs = this.getRightOperandLocal(b);
		soot.jimple.SubExpr retval = Jimple.v().newSubExpr(lhs, rhs);
		return retval;
	}
	
	public soot.Value MulExpr.emit(Body b) {
		Local lhs = this.getLeftOperandLocal(b);
		Local rhs = this.getRightOperandLocal(b);
		soot.jimple.MulExpr retval = Jimple.v().newMulExpr(lhs, rhs);
		return retval;
	}
	
	public soot.Value DivExpr.emit(Body b) {
		Local lhs = this.getLeftOperandLocal(b);
		Local rhs = this.getRightOperandLocal(b);
		soot.jimple.DivExpr retval = Jimple.v().newDivExpr(lhs, rhs);
		return retval;
	}
	
	public soot.Value ModExpr.emit(Body b) {
		Local lhs = this.getLeftOperandLocal(b);
		Local rhs = this.getRightOperandLocal(b);
		soot.jimple.RemExpr retval = Jimple.v().newRemExpr(lhs, rhs);
		return retval;
	}
	
	public soot.Value LShiftExpr.emit(Body b) {
		Local lhs = this.getLeftOperandLocal(b);
		Local rhs = this.getRightOperandLocal(b);
		soot.jimple.ShlExpr retval = Jimple.v().newShlExpr(lhs, rhs);
		return retval;
	}
	
	public soot.Value RShiftExpr.emit(Body b) {
		Local lhs = this.getLeftOperandLocal(b);
		Local rhs = this.getRightOperandLocal(b);
		soot.jimple.ShrExpr retval = Jimple.v().newShrExpr(lhs, rhs);
		return retval;
	}
	
	//NOTE: No Unsigned Shift Left definition in Java.
	
	public soot.Value URShiftExpr.emit(Body b) {
		Local lhs = this.getLeftOperandLocal(b);
		Local rhs = this.getRightOperandLocal(b);
		soot.jimple.UshrExpr retval = Jimple.v().newUshrExpr(lhs, rhs);
		return retval;
	}
	
	public soot.Value OrBitwiseExpr.emit(Body b) {
		Local lhs = this.getLeftOperandLocal(b);
		Local rhs = this.getRightOperandLocal(b);
		soot.jimple.OrExpr retval = Jimple.v().newOrExpr(lhs, rhs);
		return retval;
	}
	
	public soot.Value AndBitwiseExpr.emit(Body b) {
		Local lhs = this.getLeftOperandLocal(b);
		Local rhs = this.getRightOperandLocal(b);
		soot.jimple.AndExpr retval = Jimple.v().newAndExpr(lhs, rhs);
		return retval;
	}
	
	public soot.Value XorBitwiseExpr.emit(Body b) {
		Local lhs = this.getLeftOperandLocal(b);
		Local rhs = this.getRightOperandLocal(b);
		soot.jimple.XorExpr retval = Jimple.v().newXorExpr(lhs, rhs);
		return retval;
	}
	/*
	public soot.Value LTExpr.emit(Body b) {
		Local lhs = this.getLeftOperandLocal(b);
		Local rhs = this.getRightOperandLocal(b);
		soot.jimple.LtExpr retval = Jimple.v().newLtExpr(lhs, rhs);
		return retval;
	}*/
	
	/*
	public soot.Value AssingPlusExpr.emit(Body b) {
		Local dest = this.getDst();
	}
	*/

	//general case for accesses...
	public soot.Value AbstractDot.emit(Body b) {
		return lastAccess().emit(b);
	}
	
	// you just encounter a variable...
	public soot.Value VarAccess.emit(Body b) {
		soot.Value _this = null;
		Variable var = this.decl();
		if (this.hasPrevExpr()) {
			if (this.prevExpr() instanceof ThisAccess) {
				 _this = this.prevExpr().emit(b);
			}
		}
		System.out.println("VarAccess + " +  var);
		//I can't believe this distinction is made...
		if (var instanceof VariableDeclarator) {
			VariableDeclarator decl = (VariableDeclarator)var;			
			//TODO: host thing...
			return decl.local;
		}
		else if (var instanceof ParameterDeclaration) {
			ParameterDeclaration decl = (ParameterDeclaration)var;
			//TODO: host thing...
			System.out.println(decl.local);
			return decl.local;
		}
		else if (var instanceof FieldDeclarator) {
			FieldDeclarator f = (FieldDeclarator)var;
						System.out.println("FieldAccess " + f.prettyPrint());
			
			ArrayList list = new ArrayList();
			
			if (f.isStatic()) {
				System.out.println("STATIC" + f.prettyPrint());
				StaticFieldRef expr = Jimple.v().newStaticFieldRef(f.sootRef());
				return expr;
			} else if (this.hasPrevExpr() && this.prevExpr() instanceof ThisAccess) {
				System.out.println("THIS");
				InstanceFieldRef expr = Jimple.v().newInstanceFieldRef(_this, f.sootRef());
				return expr;
			} else {
				System.out.println("I AM SOMETHING ELSE" + this);
				Local newLocal = this.getTempLocal(b);
				InstanceFieldRef expr = Jimple.v().newInstanceFieldRef(newLocal, f.sootRef());
				//System.out.println(expr);
				return expr;
			}
		}
		else {
			System.out.println(" I AM SOMETHING ELSE THAT REQUIRES ACCESSOR " );
		}
		
		//Just for now...
		return null;
	}
	

	public soot.Value ThisAccess.emit(Body b) {
		return b.getThisLocal();
	}


	public soot.Value TypeDecl.emitCastTo(soot.Value v, TypeDecl type) {
		if (this == type) return v;
		if (this.isReferenceType() && type.isReferenceType() && this.instanceOf(type)) return v;
		
		boolean castToInt = (this.isLong()|| this instanceof FloatingPointType) && type.isIntegralType();
		if (castToInt) { //TODO 
			
		}
		
		return Expr.newCastExpr(v, type);
	}
	
	public static soot.Value Expr.newCastExpr(soot.Value v, TypeDecl type) {
		return Jimple.v().newCastExpr(v, type.sootType());
	}
	
	public soot.Value NullType.emitCastTo(soot.Value v, TypeDecl type) {
		return v;
	}
	
	public soot.Value MethodAccess.emit(Body b) {
		System.out.println("METHOD ACCESS");
		soot.Value v = this.prevExpr().emit(b);
		Local newLocal = this.prevExpr().saveInTempLocal(b, v);
		MethodDecl decl = this.decl();
		ArrayList args = new ArrayList();
		for (int i = 0; i < this.getNumArg(); i++) {
			Expr e = this.getArg(i);
			soot.Value v2 = e.emit(b);
			Local argLocal = e.saveInTempLocal(b, v2);
			args.add((soot.Value)argLocal);
		}
		VirtualInvokeExpr expr = Jimple.v().newVirtualInvokeExpr(newLocal, decl.sootRef(), args);
		return expr;
	}
		
	public static soot.jimple.ArrayRef ArrayDecl.newArrayRef(Value base, Value index) {
		return Jimple.v().newArrayRef(base, index);
	}
	
	public soot.Value SuperConstructorAccess.emit(Body b) {
		System.out.println("Super constructor access" + this.prettyPrint());
		return null;
	}
	/*
	public soot.Value Dot.emit(Body b) {
		if (!(this.getLeft() instanceof TypeAccess))
			this.getLeft().emit(b);
		if (!(this.getRight() instanceof TypeAccess))
			this.getRight().emit(b);
		
		return null;
	}*/
	
	/*
	public soot.Value CastExpr.emit(Body b) {
		
	}*/
	
	/*
	// now we encounter a method...
	public soot.Value MethodAccess.emit(Body b) {
		MethodDecl method = this.decl(); // which method are you accessing?
		boolean isQualifiedAndAccessible = isQualified() && prevExpr().isSuperAccess();
		// qualified = does it have a "package.class." before the "method()"?
		if (!method.isStatic() && isQualifiedAndAccessible) {
			Soot.value left = this.qualifier().emit();
			Local newLocal = this.saveInTempLocal(b, left);
		}
	}
	
	public soot.Local VarAccess.createLoadQualifier(Body b) {
    Variable v = decl();
    if(v instanceof FieldDeclaration) {
      FieldDeclaration f = (FieldDeclaration)v;
      if(hasPrevExpr()) {
        // load explicit qualifier
        Local qualifier = asLocal(b, prevExpr().eval(b));
        // pop qualifier stack element for class variables
        // this qualifier must be computed to ensure side effects
        return qualifier;
      }
      else if(f.isInstanceVariable()) {
        return emitThis(b, fieldQualifierType());
      }
    }
    throw new Error("createLoadQualifier not supported for " + v.getClass().getName());
  }
	
*/
	/*
	public soot.Value AssignSimpleExpr.emit(Body b) {
		Value lvalue = getDest().emit(b);
		//I don't really understand this line. I am thinking it has to do with type analysis...
		Value rvalue = asRValue(b,
			getSource().type().emitCastTo(b,
				getSource(),
				getDest().type()
			)
		);
		return getDest().emitStore(b, lvalue, asImmediate(b, rvalue), this);
	}*/
	
	
}