aspect BooleanExpressions {

	public soot.jimple.Stmt ASTNode.newLabel() {
		return soot.jimple.Jimple.v().newNopStmt();
	}
	
	syn lazy soot.jimple.Stmt Expr.false_label() = this.getParent().definesLabel() ? this.condition_false_label() : this.newLabel();
	syn lazy soot.jimple.Stmt Expr.true_label() = this.getParent().definesLabel() ? this.condition_true_label() : this.newLabel();
	
	syn boolean ASTNode.definesLabel() = false;
	eq Opt.definesLabel() = this.getParent().definesLabel();
	eq List.definesLabel() = this.getParent().definesLabel();
	eq AbstractDot.definesLabel() = this.getParent().definesLabel();
	eq ParExpr.definesLabel() = this.getParent().definesLabel();
	
	eq LogNotExpr.definesLabel() = true;
	eq ConditionalExpr.definesLabel() = true;
	eq RelationalExpr.definesLabel() = false;
	
	eq LogicalExpr.definesLabel() = true;
	eq IfStmt.definesLabel() = true;
	eq WhileStmt.definesLabel() = true;
	eq DoStmt.definesLabel() = true;
	eq ForStmt.definesLabel() = true;
	
	syn lazy soot.jimple.Stmt DoStmt.soot_begin_label() = newLabel();
	syn lazy soot.jimple.Stmt ForStmt.soot_begin_label() = newLabel();
	 syn lazy soot.jimple.Stmt WhileStmt.soot_end_label() = newLabel();
	 syn lazy soot.jimple.Stmt DoStmt.soot_end_label() = newLabel();
	syn lazy soot.jimple.Stmt IfStmt.soot_else_branch_label() = newLabel();
	syn lazy soot.jimple.Stmt IfStmt.soot_then_branch_label() = newLabel();
	syn lazy soot.jimple.Stmt LabeledStmt.soot_end_label() = newLabel();
	syn lazy soot.jimple.Stmt ForStmt.soot_end_label() = newLabel();
	syn lazy soot.jimple.Stmt WhileStmt.soot_stmt_label() = newLabel();
	
	syn lazy soot.jimple.Stmt ConditionalExpr.soot_else_branch_label() = this.newLabel();
	syn lazy soot.jimple.Stmt ConditionalExpr.soot_then_branch_label() = this.newLabel();
	eq IfStmt.getCondition().condition_false_label() = this.soot_else_branch_label();
	eq IfStmt.getCondition().condition_true_label() = this.soot_then_branch_label();
	eq WhileStmt.getCondition().condition_false_label() = this.soot_end_label();
	eq WhileStmt.getCondition().condition_true_label() = this.soot_stmt_label();
	eq DoStmt.getCondition().condition_false_label() = this.soot_end_label();
	eq DoStmt.getCondition().condition_true_label() = this.soot_begin_label();
	eq ForStmt.getCondition().condition_false_label() = this.soot_end_label();
	eq ForStmt.getCondition().condition_true_label() = this.soot_begin_label();
	
	inh soot.jimple.Stmt Expr.condition_false_label();
	eq Program.getCompilationUnit(int i).condition_false_label() {
		throw new Error("condition_false_label not implemented");
	}
	
	inh soot.jimple.Stmt Expr.condition_true_label();
	eq Program.getCompilationUnit(int i).condition_true_label() {
		throw new Error("condition_true_label not implemented");
	}
	
	eq LogNotExpr.getOperand().condition_false_label() = this.true_label();
	eq LogNotExpr.getOperand().condition_true_label() = this.false_label();
	
	eq ConditionalExpr.getCondition().condition_false_label() = this.soot_else_branch_label();
	eq ConditionalExpr.getCondition().condition_true_label() = this.soot_then_branch_label();
	eq ConditionalExpr.getTrueExpr().condition_false_label() = this.false_label();
	eq ConditionalExpr.getTrueExpr().condition_true_label() = this.true_label();
	eq ConditionalExpr.getFalseExpr().condition_false_label() = this.false_label();
	eq ConditionalExpr.getFalseExpr().condition_true_label() = this.true_label();
	
	eq RelationalExpr.getLeftOperand().condition_false_label() = this.false_label();
	eq RelationalExpr.getLeftOperand().condition_true_label() = this.true_label();
	eq RelationalExpr.getRightOperand().condition_false_label() = this.false_label();
	eq RelationalExpr.getRightOperand().condition_true_label() = this.true_label();
	
	syn lazy soot.jimple.Stmt AndLogicalExpr.next_test_label() = this.newLabel();
	eq AndLogicalExpr.getLeftOperand().condition_false_label() = this.false_label();
	eq AndLogicalExpr.getLeftOperand().condition_true_label() = this.next_test_label();
	eq AndLogicalExpr.getRightOperand().condition_false_label() = this.false_label();
	eq AndLogicalExpr.getRightOperand().condition_true_label() = this.true_label();
	
	syn lazy soot.jimple.Stmt OrLogicalExpr.next_test_label() = this.newLabel();
	eq OrLogicalExpr.getLeftOperand().condition_false_label() = this.next_test_label();
	eq OrLogicalExpr.getLeftOperand().condition_true_label() = this.true_label();
	eq OrLogicalExpr.getRightOperand().condition_false_label() = this.false_label();
	eq OrLogicalExpr.getRightOperand().condition_true_label() = this.true_label();
	
	
	public soot.Value RelationalExpr.emit(Body b) { 
		return this.emitBooleanCondition(b);
	}
	
	protected soot.Value Expr.emitBooleanCondition(Body b) {
		//this.emitBranch(b);
		soot.jimple.Stmt end_label = this.newLabel();
		b.getUnits().add(this.false_label());
		Local result = this.saveInTempLocal(b, this.emitConstant(new Constant.ConstantBoolean(false)));
		b.getUnits().add(Jimple.v().newGotoStmt(end_label));
		b.getUnits().add(this.true_label());
		this.saveInTempLocal(b, this.emitConstant(new Constant.ConstantBoolean(true)));
		b.getUnits().add(end_label);
		return result;
	}
	
}