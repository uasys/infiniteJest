import soot.*;
import java.io.*;
import soot.options.*;
import soot.Scene;
import soot.jimple.*;
import soot.util.*;
import soot.tagkit.SourceFileTag;

aspect InfiniteJast {

  public void CompilationUnit.process()  {
	if (this.fromSource()) {
		this.jimplify();
	}
  }
  
  public void ASTNode.jimplify() {
  	for(int i = 0; i < getNumChild(); i++) {
  		getChild(i).jimplify();
  	}
  }
  
  public void ASTNode.jimplify(JimpleBody body) {
  	for(int i = 0; i < this.getNumChild(); i++) {
  		this.getChild(i).jimplify(body);
  	}
  }
  
  public void ClassDecl.jimplify() {

    SootClass sClass = this.getSootClassDecl();
    if (this.hasImplicitConstructor()) {
    	this.getImplicitConstructor().jimplify();
    }
    sClass.setResolvingLevel(SootClass.HIERARCHY);
    super.jimplify();
    sClass.setResolvingLevel(SootClass.SIGNATURES);

    try {
    	String fileName = SourceLocator.v().getFileNameFor(sClass, soot.options.Options.output_format_jimple);
		OutputStream streamOut = new FileOutputStream(fileName);
		PrintWriter writerOut = new PrintWriter(new OutputStreamWriter(streamOut));
		Printer.v().printTo(sClass, writerOut);
		writerOut.flush();
		streamOut.close();

		 /*
    	String fileName = SourceLocator.v().getFileNameFor(sClass, soot.options.Options.output_format_class);
    	OutputStream streamOut = new FileOutputStream(fileName);
		PrintWriter writerOut = new PrintWriter(new OutputStreamWriter(streamOut));
	  	JasminClass jasminClass = new soot.jimple.JasminClass(sClass);
	  	jasminClass.print(writerOut);
	  	writerOut.flush();
	  	streamOut.close();*/
	} catch (Exception e) {
		System.out.println(e.getMessage());
		System.out.println("There was an error writing the jimple file");
	}
  }
  
  public void InterfaceDecl.jimplify() {
  	SootClass sc = this.getSootClassDecl();
  	sc.setResolvingLevel(SootClass.HIERARCHY);
  	super.jimplify();
  	sc.setResolvingLevel(SootClass.SIGNATURES);
  	
  	try {
    	String fileName = SourceLocator.v().getFileNameFor(sc, soot.options.Options.output_format_jimple);
		OutputStream streamOut = new FileOutputStream(fileName);
		PrintWriter writerOut = new PrintWriter(new OutputStreamWriter(streamOut));
		Printer.v().printTo(sc, writerOut);
		writerOut.flush();
		streamOut.close();
		/*	  
	  	JasminClass jasminClass = new soot.jimple.JasminClass(sClass);
	  	jasminClass.print(writerOut);
	  	writerOut.flush();
	  	streamOut.close();
	  	*/
	} catch (Exception e) {
		System.out.println(e.getMessage());
		System.out.println("There was an error writing the jimple file");
	}
  }
  
  public void FieldDecl.jimplify() {
  	for(int i = 0; i < getNumChild(); i++) {
  		getChild(i).jimplify();
  	}
  }
    
  public void FieldDeclarator.jimplify() {
  	this.sootField();
  }
  
  public void BodyDecl.jimplify() {
  }
  
  public void MethodDecl.jimplify() {
  	SootMethod method = this.sootMethod();
  	for (int i = 0; i < this.getNumChild(); i++) {
		this.getChild(i).jimplify((JimpleBody)method.getActiveBody());
  	}
	if( method.getReturnType().equals(soot.VoidType.v())) {
		//TODO: not sure if we still need this...
		method.getActiveBody().getUnits().add(Jimple.v().newReturnVoidStmt());
	}
  }
    
  public void ConstructorDecl.jimplify() {
	this.sootMethod();
	
  }
  
  
  //TODO: add dimensions...
  public void VariableDeclarator.jimplify(JimpleBody body) {
  	System.out.println("VariableDeclarator");
  	Expr init = this.getInit();
  	Local newLocal = Jimple.v().newLocal(this.name(), this.type().sootType());
  	body.getLocals().add(newLocal);

  	if (this.hasInit()) {
  		soot.Value rval = init.emit(body);
  		Chain units = body.getUnits();
  		units.add(Jimple.v().newAssignStmt(newLocal, rval));
  	}
  	this.local = newLocal;
  }
  
  public void ReturnStmt.jimplify(JimpleBody body) {
	Chain units = body.getUnits();
	if (this.hasResult()) {
  		Expr result = this.getResult();
  		soot.Value value = result.emit(body);
  		Local newLocal = result.saveInTempLocal(body, value);
  		units.add(Jimple.v().newRetStmt(newLocal));
  	} else {
  		units.add(Jimple.v().newReturnVoidStmt());
  	}
  }
  
  public void ExprStmt.jimplify(JimpleBody body) {
  	System.out.println("ExprStmt");
  	Expr result = this.getExpr();
  	soot.Value value = result.emit(body);
  	if (result.type().isVoid()) {
		body.getUnits().add(Jimple.v().newInvokeStmt(value));
		
  	} else {
  		result.saveInTempLocal(body, value);
  	}
  }
  
  public void Expr.emitEvalBranch(Body b) {
  	//EqExpr eqExpr 
  	//IfStmt ifStmt = Jimple.v().newIfStmt()
  }
  
  public void IfStmt.jimplify(JimpleBody body) {
  	soot.jimple.Stmt endBranch = this.newLabel();
  	soot.jimple.Stmt thenBranch = this.newLabel();
	soot.Value value = this.getCondition().emit(body);
	Local condition = this.getCondition().saveInTempLocal(body);
	EqExpr negation = Jimple.v().newEqExpr(condition, this.getCondition().emitConstant(new Constant.ConstantBoolean(false)));
	//body.getUnits().add(negation);
	body.getUnits().add(soot_then_branch_label());
	
  	soot.jimple.IfStmt ifStmt = Jimple.v().newIfStmt(negation, endBranch);
  	body.getUnits().add(ifStmt);
  	this.getThen().jimplify(body);
  	
  	if (this.getThen().canCompleteNormally() && this.hasElse()) {
  		body.getUnits().add(Jimple.v().newGotoStmt(soot_else_branch_label()));
  	}
  	if (this.hasElse()) {
  		body.getUnits().add(soot_else_branch_label());
  	} else {
  		body.getUnits().add(endBranch);
  	}
  	
  }
  
  public Local VariableDeclarator.local = null;
  public Local ParameterDeclaration.local = null;
  /*
  public <T> void Stmt.jimplify(T _units) {
  	if (!(_units instanceof Chain)) {
  		for(int i = 0; i < getNumChild(); i++) {
  			getChild(i).jimplify(_units);
  		}
  	}
  	Chain units = (Chain)_units;
  }
*/
}