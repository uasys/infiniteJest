import soot.*;
import java.io.*;
import soot.options.*;
import soot.Scene;
import soot.jimple.*;
import soot.util.*;

aspect InfiniteJast {

  public void CompilationUnit.process()  {
	if (this.fromSource()) {
		this.jimplify(null);
	}
  }
  
  public <T> void ASTNode.jimplify(T c) {
  	for(int i = 0; i < getNumChild(); i++) {
  		getChild(i).jimplify(c);
  	}
  }
  
  public <T> void ClassDecl.jimplify(T _sClass) {
  	SootClass incoming = null;

  	//do I need to always load and support java.lang.Object and java.lang.System?
  	Scene.v().loadClassAndSupport("java.lang.Object");
    Scene.v().loadClassAndSupport("java.lang.System");
    SootClass sClass = new SootClass(this.jvmName(), this.flags());
    sClass.setSuperclass(Scene.v().getSootClass(this.superclass().fullName()));
    if (_sClass instanceof SootClass) {
  		incoming = (SootClass)_sClass;
  		sClass.setOuterClass(incoming);
  	}
    
    //TODO: need to add implements...
    List<Access> _implements = this.getImplementss();
    
    Scene.v().addClass(sClass);
    for(int i = 0; i < getNumChild(); i++) {
    	getChild(i).jimplify(sClass);
    	try {
    		String fileName = SourceLocator.v().getFileNameFor(sClass, soot.options.Options.output_format_jimple);
			OutputStream streamOut = new FileOutputStream(fileName);
			PrintWriter writerOut = new PrintWriter(new OutputStreamWriter(streamOut));
			Printer.v().printTo(sClass, writerOut);
			writerOut.flush();
			streamOut.close();
		} catch (Exception e) {
			System.out.println("There was an error writing the jimple file");
		}
    }
  }
  

  public <T> void MethodDecl.jimplify(T _sClass) {
  	if (!(_sClass instanceof SootClass)) {
  		for(int i = 0; i < getNumChild(); i++) {
  			getChild(i).jimplify(_sClass);
  		}
  		return;
  	}
  	
  	SootClass sClass = (SootClass)_sClass;
 	//TODO: Exceptions....
 	java.util.LinkedHashMap<Local, Type> params = this.getParametersSoot();
 	java.util.List<Type> types = new ArrayList<Type>(params.values());
 	SootMethod method = new SootMethod(this.name(), types, this.type().sootType(), this.flags());
   	sClass.addMethod(method);
   	JimpleBody body = Jimple.v().newBody(method);
    method.setActiveBody(body);
    this.addParamsToBody(body, params);
	for(int i = 0; i < getNumChild(); i++) {
  		getChild(i).jimplify(body);
  	}
  }
  
  //TODO: add dimensions...
  public <T> void Declarator.jimplify(T _body) {
  	if (!(_body instanceof JimpleBody)) {
  		for (int i = 0; i < getNumChild(); i++) {
  			getChild(i).jimplify(_body);
  		}
  		return;
  	}
  	Expr init = this.getInit();
  	JimpleBody body = (JimpleBody)_body;
  	Local newLocal = Jimple.v().newLocal(this.name(), this.type().sootType());
  	body.getLocals().add(newLocal);
  	if (null != init) {
  		soot.Value rval = init.eval(body);
  		Chain units = body.getUnits();
  		units.add(Jimple.v().newAssignStmt(newLocal, rval));
  	}
  }
  
  public <T> void ReturnStmt.jimplify(T _units) {
  	if (!(_units instanceof Chain)) {
  		for (int i = 0; i < getNumChild(); i++) {
  			getChild(i).jimplify(_units);
  		}
  		return;
  	}
  	Chain units = (Chain)_units;
  	units.add(Jimple.v().newReturnVoidStmt());
	for(int i = 0; i < getNumChild(); i++) {
		getChild(i).jimplify(units);
	}
  }
  /*
  public <T> void Stmt.jimplify(T _units) {
  	if (!(_units instanceof Chain)) {
  		for(int i = 0; i < getNumChild(); i++) {
  			getChild(i).jimplify(_units);
  		}
  	}
  	Chain units = (Chain)_units;
  }
*/
}