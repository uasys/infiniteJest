import soot.*;
import java.io.*;
import soot.options.*;
import soot.Scene;
import soot.jimple.*;
import soot.util.*;
import soot.tagkit.SourceFileTag;

aspect InfiniteJast {

  public void CompilationUnit.process()  {
	if (this.fromSource()) {
		this.jimplify();
	}
  }
  
  public void ASTNode.jimplify() {
  	for(int i = 0; i < getNumChild(); i++) {
  		getChild(i).jimplify();
  	}
  }
  
  public void ClassDecl.jimplify() {

    SootClass sClass = this.getSootClassDecl();
    sClass.setResolvingLevel(SootClass.HIERARCHY);
    super.jimplify();
    sClass.setResolvingLevel(SootClass.SIGNATURES);
    try {
    	String fileName = SourceLocator.v().getFileNameFor(sClass, soot.options.Options.output_format_jimple);
		OutputStream streamOut = new FileOutputStream(fileName);
		PrintWriter writerOut = new PrintWriter(new OutputStreamWriter(streamOut));
		Printer.v().printTo(sClass, writerOut);
		writerOut.flush();
		streamOut.close();
		/*	  
	  	JasminClass jasminClass = new soot.jimple.JasminClass(sClass);
	  	jasminClass.print(writerOut);
	  	writerOut.flush();
	  	streamOut.close();
	  	*/
	} catch (Exception e) {
		System.out.println(e.getMessage());
		System.out.println("There was an error writing the jimple file");
	}
  }
  
  public void InterfaceDecl.jimplify() {
  	SootClass sc = this.getSootClassDecl();
  	sc.setResolvingLevel(SootClass.HIERARCHY);
  	sc.setResolvingLevel(SootClass.SIGNATURES);
  	
  	try {
    	String fileName = SourceLocator.v().getFileNameFor(sc, soot.options.Options.output_format_jimple);
		OutputStream streamOut = new FileOutputStream(fileName);
		PrintWriter writerOut = new PrintWriter(new OutputStreamWriter(streamOut));
		Printer.v().printTo(sc, writerOut);
		writerOut.flush();
		streamOut.close();
		/*	  
	  	JasminClass jasminClass = new soot.jimple.JasminClass(sClass);
	  	jasminClass.print(writerOut);
	  	writerOut.flush();
	  	streamOut.close();
	  	*/
	} catch (Exception e) {
		System.out.println(e.getMessage());
		System.out.println("There was an error writing the jimple file");
	}
  }
  
  public void FieldDecl.jimplify() {
  	for(int i = 0; i < getNumChild(); i++) {
  		getChild(i).jimplify();
  	}
  }
    
  public void FieldDeclarator.jimplify() {
  	this.sootField();
  }
  
  public void BodyDecl.jimplify() {
  }
  
  public void MethodDecl.jimplify() {
  	this.sootMethod();
  }
  
  public void ConstructorDecl.jimplify() {
	this.sootMethod();
  }

  
  //TODO: add dimensions...
  public void VariableDeclarator.jimplify(JimpleBody body) {

  	Expr init = this.getInit();
  	Local newLocal = Jimple.v().newLocal(this.name(), this.type().sootType());
  	body.getLocals().add(newLocal);
  	if (this.hasInit()) {
  		soot.Value rval = init.emit(body);
  		Chain units = body.getUnits();
  		units.add(Jimple.v().newAssignStmt(newLocal, rval));
  	}
  	this.local = newLocal;
  }
  
  public void ReturnStmt.jimplify(Chain units) {

  	units.add(Jimple.v().newReturnVoidStmt());
	for(int i = 0; i < getNumChild(); i++) {
		//getChild(i).jimplify();
	}
  }
  
  public Local VariableDeclarator.local = null;
  public Local ParameterDeclaration.local = null;
  /*
  public <T> void Stmt.jimplify(T _units) {
  	if (!(_units instanceof Chain)) {
  		for(int i = 0; i < getNumChild(); i++) {
  			getChild(i).jimplify(_units);
  		}
  	}
  	Chain units = (Chain)_units;
  }
*/
}